require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/expenses', type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Expense. As you add validations to Expense, be sure to
  # adjust the attributes here as well.

  before :each do
    @user = User.create(name: 'Diego Yon', email: 'diego@gmail.com', password: 123_456)
    @category = Category.create!(name: 'Food', icon: 'FoodIcon', user: @user)
    sign_in @user
  end

  let(:valid_attributes) do
    {
      name: 'Chicken',
      amount: 20,
      user: @user,
      category_ids: [@category.id]
    }
  end

  let(:invalid_attributes) do
    {
      name: nil,
      amount: nil,
      user: @user,
      category_ids: []
    }
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      Expense.create! valid_attributes
      get category_expenses_url(@category)
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      expense = Expense.create! valid_attributes
      get category_expense_url(@category, expense)
      expect(response).to be_successful
    end
  end

  describe 'GET /new' do
    it 'renders a successful response' do
      get new_category_expense_url(@category)
      expect(response).to be_successful
    end
  end

  describe 'GET /edit' do
    it 'renders a successful response' do
      expense = Expense.create! valid_attributes
      get edit_category_expense_url(@category, expense)
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new Expense' do
        expect do
          post category_expenses_url(@category), params: { expense: valid_attributes }
        end.to change(Expense, :count).by(1)
      end

      it 'redirects to the category show page' do
        post category_expenses_url(@category), params: { expense: valid_attributes }
        expect(response).to redirect_to(category_url(@category))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new Expense' do
        expect do
          post category_expenses_url(@category), params: { expense: invalid_attributes }
        end.to change(Expense, :count).by(0)
      end

      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post category_expenses_url(@category), params: { expense: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        {
          name: 'Apple',
          amount: 2,
          user: @user,
          category_ids: [@category.id]
        }
      end

      it 'updates the requested expense' do
        expense = Expense.create! valid_attributes
        patch category_expense_url(@category, expense), params: { expense: new_attributes }
        expense.reload
        expect(expense.attributes).to include({ 'name' => 'Apple' })
        expect(expense.attributes).to include({ 'amount' => 2 })
      end

      it 'redirects to the category show page' do
        expense = Expense.create! valid_attributes
        patch category_expense_url(@category, expense), params: { expense: new_attributes }
        expense.reload
        expect(response).to redirect_to(category_url(@category))
      end
    end

    context 'with invalid parameters' do
      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        expense = Expense.create! valid_attributes
        patch category_expense_url(@category, expense), params: { expense: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested expense' do
      expense = Expense.create! valid_attributes
      expect do
        delete category_expense_url(@category, expense)
      end.to change(Expense, :count).by(-1)
    end

    it 'redirects to the category show page' do
      expense = Expense.create! valid_attributes
      delete category_expense_url(@category, expense)
      expect(response).to redirect_to(category_url(@category))
    end
  end
end
